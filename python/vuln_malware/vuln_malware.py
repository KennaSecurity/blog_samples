# Uses VI+ APIs to show vulnerability definitions and malware family and hashes.

import os
import sys
import json
import requests

def print_json(json_obj):
    print(json.dumps(json_obj, sort_keys=True, indent=2))

def show_vuln_def(base_url, headers, cve):
    show_vuln_def_url = base_url + "vulnerability_definitions/" + cve
    response = requests.get(show_vuln_def_url, headers=headers)
    if response.status_code != 200:
        print("Show Vulnerability Definition Error: " + str(response.status_code))
        sys.exit(1)
    resp_json = response.json()
    #print(f"{resp_json}")

    vuln_defs = resp_json['vulnerability_definition']
    malware_count = vuln_defs['malware_count']
    malware_exploitable = vuln_defs['malware_exploitable']
    vuln_id = vuln_defs['id']
    cve_desc = vuln_defs['description']
    risk_meter_score = vuln_defs['risk_meter_score']

    # Feel free to get and display more fields.
    print(f"ID: {vuln_id}  Malware count: {malware_count}  Exploitable: {malware_exploitable}  Score: {risk_meter_score}")
    print(f"{cve_desc}")

def show_malware_family(base_url, headers, cve):
    show_malware_family_url = base_url + "vulnerability_definitions/" + cve + "/malware_families"

    response = requests.get(show_malware_family_url, headers=headers)
    if response.status_code != 200:
        print("Show Malware Family Error: " + str(response.status_code))
        sys.exit(1)
    resp_json = response.json()
    #print(f"{resp_json}")

    if len(resp_json) == 0:
        print("No malware family information")
        return

    malware_family = resp_json[0]['malware_family']
    print("Malware Family:")
    print_json(malware_family)

def show_malware_hashes(base_url, headers, cve):
    show_malware_hashes_url = base_url + "vulnerability_definitions/" + cve + "/malware"

    response = requests.get(show_malware_hashes_url, headers=headers)
    if response.status_code != 200:
        print("Show Malware Hashes Error: " + str(response.status_code))
        sys.exit(1)
    resp_json = response.json()
    #print(f"{resp_json}")

    malware_hashes = resp_json['malware']
    if len(malware_hashes) == 0:
        print("No malware hashes")
        return
        
    print("Malware Hashes:")
    print_json(malware_hashes)

def show_vuln_malware(base_url, headers, cve):
    print(f"Show Vulnerability and Malware for {cve}")

    show_vuln_def(base_url, headers, cve)
    show_malware_family(base_url, headers, cve)
    show_malware_hashes(base_url, headers, cve)

    print("")

if __name__ == "__main__":
    if len(sys.argv) < 1:
       print(f"{sys.argv[0]} <CVE> [CVE] ...")
       sys.exit(1)
   
    # API_KEY is an environment variable.
    api_key = os.getenv('KENNA_API_KEY')
    if api_key is None:
       print("KENNA_API key is non-existent")
       sys.exit(1)

    # Might have to change this depending on your server.
    base_url = "https://api.kennasecurity.com/"
   
    # HTTP header.
    headers = {'Accept': 'application/json',
              'X-Risk-Token': api_key,
              'User-Agent': 'Kenna Security, sample/show_vulnerability_malware, 1.0'}

    # Pop off the program name.
    sys.argv.pop(0)
    print("")

    # For each CVE, get malware family and hash information.
    for cve in sys.argv:
        show_vuln_malware(base_url, headers, cve)
